W1_01 RepetitionsAufgabe | 16.08.2023 [

package bin;

import java.util.InputMismatchException;
import java.util.Scanner;

public class W1_A1 {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
int total = 0;
int input;
String action = "";

System.out.println("Welcome to the account application");
while (true) {
input = 0;
System.out.println("Please enter the amount, 0 (zero) to terminate, or = to check balance");
try {
input = sc.nextInt();
if (input == 0) {
break;
}
System.out.println("To deposit, press +, to withdraw, press -");
action = sc.next();
switch (action) {
case "+":
total = total + input;
break;
case "-":
total = total - input;
break;
case "=":
System.out.println("Current balance: " + total);
break;
}
} catch (InputMismatchException e) {
action = sc.next();
if (action.equals("=")) {
System.out.println("Current Balance: " + total);
} else {
System.out.println("Error: input must be Integer value or '='.");
}
}
}
System.out.println("Final balance: " + total);
sc.close();
}
}

]

W1_03 Refactoring AccountApplication | 16.08.2023 [

Account.java


package object;

public class Account {
	private double balance;

	public void deposit(double amount) {
		balance += amount;
	}

	public void withdraw(double amount) {
		balance -= amount;
	}

	public double getBalance() {
		return balance;
	}
}



Refactoring_AccountApplication.java

package bin;

import java.util.InputMismatchException;
import java.util.Scanner;

import object.Account;

public class Refactoring_AccountApplication {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int input;
		String action = "";
		Account total = new Account();

		System.out.println("Welcome to the account application");
		while (true) {
			input = 0;
			System.out.println("Please enter the amount, 0 (zero) to terminate, or = to check balance");
			try {
				input = sc.nextInt();
				if (input == 0) {
					break;
				}
				System.out.println("To deposit, press +, to withdraw, press -");
				action = sc.next();
				switch (action) {
				case "+":
					total.deposit(input);;
					break;
				case "-":
					total.withdraw(input);;
					break;
				case "=":
					System.out.println("Current balance: " + total.getBalance());
					break;
				}
			} catch (InputMismatchException e) {
				action = sc.next();
				if (action.equals("=")) {
					System.out.println("Current Balance: " + total.getBalance());
				} else {
					System.out.println("Error: input must be Integer value or '='.");
				}
			}
		}
		System.out.println("Final balance: " + total.getBalance());
		sc.close();
	}
}

]


W02_2 Konstruktor implementieren | 23.08.2023 [

Acount.java

package object;

public class Account {
private double balance;

public void deposit(double amount) {
balance += amount;
}

public void withdraw(double amount) {
balance -= amount;
}

public double getBalance() {
return balance;
}

public Account(double balance) {
this.balance = balance;
}
}

Refactoring_AccountApplication.java

Account total = new Account(0);


]

W2_02 Regatta | 23.08.2023 [

boatStart.java

package bin;

import object.Competition;
import object.Ship;

public class boatStart {

	public static void main(String[] args) {
		Competition c = new Competition("Rotsee Regatta");
		Ship ship1 = new Ship(1, "Alinghi");
		Ship ship2 = new Ship(2, "Red Baron");
		Ship ship3 = new Ship(3, "Blue Lagoon");
		c.addShip(ship1); // add ships to competition
		c.addShip(ship2);
		c.addShip(ship3);
		c.start(); // start competition
		c.printResult(); // print ships with time
	}

}


Ship.java

package object;

public class Ship {
	
	private int nr;
	private String name;
	private int time;
	
	public Ship(int nr, String name) {
		this.nr = nr;
		this.name = name;
	}
	
	public int getNr() {
		return nr;
	}
	public void setNr(int nr) {
		this.nr = nr;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getTime() {
		return time;
	}
	
	public void race() {
		this.time = (int)(Math.random() * (600 - 300 + 1)) + 300;
	}
	
}


Competition.java

package object;

public class Competition {

	private String name;
	private Ship[] ships = new Ship[5];

	public Competition(String name) {
		this.name = name;
	}

	public String getName() {
		return this.name;
	}

	public void addShip(Ship ship) {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] == null) {
				ships[i] = ship;
				break;
			}
		}
	}

	public void start() {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] != null) {
				ships[i].race();
			}
		}
	}
	
	public void printResult() {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] != null) {
				System.out.println("Shiff Nr: " + i + " Name " + ships[i].getName() + " Zeit: " + ships[i].getTime());
			}
		}
	}
	
}

]

W02_4 Regatta Erweiterung | 23.08.2023 [

boatStart.java

package bin;

import object.Competition;
import object.Person;
import object.Ship;

public class boatStart {

	public static void main(String[] args) {
		Competition c = new Competition("Rotsee Regatta");
		Person p1 = new Person("Ronan", "Coughlan", "Binningen");
		Person p2 = new Person("Noah", "Beetschen", "Dornach");
		Person p3 = new Person("David", "Weber", "Hochwald");
		Ship ship1 = new Ship(1, "Alinghi");
		Ship ship2 = new Ship(2, "Red Baron");
		Ship ship3 = new Ship(3, "Blue Lagoon");
		ship1.setOwner(p1);
		ship2.setOwner(p2);
		ship3.setOwner(p3);
		c.addShip(ship1); // add ships to competition
		c.addShip(ship2);
		c.addShip(ship3);
		c.start(); // start competition
		c.printResult(); // print ships with time
	}

}

Ship.java

package object;

public class Ship {
	
	private int nr;
	private String name;
	private int time;
	private Person owner;
	
	public Ship(int nr, String name) {
		this.nr = nr;
		this.name = name;
	}
	
	public int getNr() {
		return nr;
	}
	public void setNr(int nr) {
		this.nr = nr;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getTime() {
		return time;
	}
	
	public void race() {
		this.time = (int)(Math.random() * (600 - 300 + 1)) + 300;
	}

	public Person getOwner() {
		return owner;
	}

	public void setOwner(Person owner) {
		this.owner = owner;
	}
	
}


Competition.java
package object;

public class Competition {

	private String name;
	private Ship[] ships = new Ship[5];

	public Competition(String name) {
		this.name = name;
	}

	public String getName() {
		return this.name;
	}

	public void addShip(Ship ship) {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] == null) {
				ships[i] = ship;
				break;
			}
		}
	}

	public void start() {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] != null) {
				ships[i].race();
			}
		}
	}
	
	public void printResult() {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] != null) {
				System.out.println("Shiff Nr: " + i + " Owner " + ships[i].getOwner().getFirstname() + " " + ships[i].getOwner().getLastname() + " Name " + ships[i].getName() + " Zeit: " + ships[i].getTime());
			}
		}
	}
	
}

Person.java

package object;

public class Person {

	private String firstname;
	private String lastname;
	private String residence;
	
	public Person(String firstname, String lastname, String residence) {
		this.firstname = firstname;
		this.lastname = lastname;
		this.residence = residence;
	}

	public String getFirstname() {
		return firstname;
	}

	public void setFirstname(String firstname) {
		this.firstname = firstname;
	}

	public String getLastname() {
		return lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	public String getResidence() {
		return residence;
	}

	public void setResidence(String residence) {
		this.residence = residence;
	}
	
}

]

W3_03 Invoice | 30.08.2023 [

Aufgabe 1

Invoice.java

package object;

import java.util.ArrayList;
import java.util.List;

public class Invoice {

	private List<Item> items = new ArrayList<>();
	private double totalPrice;

	public void addItem(Item item) {
		this.items.add(item);
	}

	public double calculateTotalPrice() {
		for (Item i : items) {
			this.totalPrice += i.getPrice();
		}
		return this.totalPrice;
	}

	public String printInvoice() {
		String invoiceOverview = "Invoice items: \r\n";
		for (Item i : items) {
			invoiceOverview += String.format("%s: %s	%s CHF\r\n", i.getPosition(), i.getText(), i.getPrice());
		}
		invoiceOverview += String.format("\r\nTotal: %s CHF", calculateTotalPrice());
		return invoiceOverview;
	}

}


Item.java

package object;

public class Item {
	
	private String text;
	private double price;
	private int position;
	
	public Item(String text, double price, int position) {
		this.text = text;
		this.price = price;
		this.position = position;
	}
	
	public String getText() {
		return this.text;
	}
	
	public double getPrice() {
		return this.price;
	}
	
	public int getPosition() {
		return this.position;
	}
	
}


InvoiceRunner.java

package bin;

import object.Invoice;
import object.Item;

public class InvoiceRunner {
	
	public static void main(String[] args) {
		Invoice invoice = new Invoice();
		invoice.addItem(new Item("Zalando | Hoodie", 349.99, 1));
		invoice.addItem(new Item("Zalando | Schuhe", 299.99, 2));
		invoice.addItem(new Item("StockX | Jordan 4", 637.50, 3));
		System.out.println(invoice.printInvoice());
	}

}


Aufgabe 2 (Erweiterung)

Invoice.java

package object;

import java.util.ArrayList;
import java.util.List;

public class Invoice {

	private List<Item> items = new ArrayList<>();
	private double totalPrice;
	private double vat;

	public double getVat() {
		return vat;
	}

	public void setVat(double vat) {
		this.vat = vat;
	}

	public void addItem(Item item) {
		this.items.add(item);
	}

	public double calculateTotalPrice() {
		for (Item i : items) {
			this.totalPrice += i.getPrice();
		}
		return this.totalPrice;
	}

	public String printInvoice() {
		String invoiceOverview = "Invoice items: \r\n";
		for (Item i : items) {
			invoiceOverview += String.format("%s: %s	%s CHF\r\n", i.getPosition(), i.getText(), i.getPrice());
		}
		invoiceOverview += String.format("\r\nTotal: %s CHF", calculateTotalPrice());
		return invoiceOverview;
	}

	public String printInvoiceWithVAT() {
		String invoiceOverview = "Invoice items: \r\n";
		for (Item i : items) {
			invoiceOverview += String.format("%s: %s	%s CHF\r\n", i.getPosition(), i.getText(), i.getPrice());
		}
		invoiceOverview += String.format("VAT: %s%%", this.vat);
		invoiceOverview += String.format("\r\nTotal: %s CHF", calculateTotalPrice() - (calculateTotalPrice() / 100 * vat));
		return invoiceOverview;
	}

}


Item.java

package object;

public class Item {

	private String text;
	private double price;
	private int position;

	public Item(String text, double price, int position) {
		this.text = text;
		this.price = price;
		this.position = position;
	}

	public String getText() {
		return this.text;
	}

	public double getPrice() {
		return this.price;
	}

	public int getPosition() {
		return this.position;
	}

}


InvoiceRunner.java

package bin;

import object.Invoice;
import object.Item;

public class InvoiceRunner {
	
	public static void main(String[] args) {
		Invoice invoice = new Invoice();
		invoice.setVat(7.7);
		invoice.addItem(new Item("Zalando | Hoodie", 349.99, 1));
		invoice.addItem(new Item("Zalando | Schuhe", 299.99, 2));
		invoice.addItem(new Item("StockX | Jordan 4", 637.50, 3));
		System.out.println(invoice.printInvoiceWithVAT());
	}

}

]

W03_4 Game | 30.08.2023 [

Aufgabe 1

GameEngine.java

package object;

public class GameEngine {

	private Character p1;
	private Character p2;
	private int turn = 1;

	public GameEngine(Character p1, Character p2) {
		this.p1 = p1;
		this.p2 = p2;
	}

	public void printRound(int turn, int damage) {
		if (turn == 1) {
			System.out.println(String.format("%s hit %s with %s\r\n%s: hp=%s\r\n%s: hp=%s\r\n---\r\n", p1.getName(),
					p2.getName(), damage, p1.getName(), p1.getHp(), p2.getName(), p2.getHp()));
		} else {
			System.out.println(String.format("%s hit %s with %s\r\n%s: hp=%s\r\n%s: hp=%s\r\n---\r\n", p2.getName(),
					p1.getName(), damage, p1.getName(), p1.getHp(), p2.getName(), p2.getHp()));
		}
	}

	public void start() {
		
		System.out.println(String.format("DEATHMATCH\r\n%s vs %s\r\n", p1.getName(), p2.getName()));
		
		while (p1.getHp() > 0 && p2.getHp() > 0) {
			if (turn == 1) {
				int damage = (int) (Math.random() * (p1.getAp() - 0 + 1));
				p2.setHp(p2.getHp() - damage);
				printRound(turn, damage);
				turn--;
			} else {
				int damage = (int) (Math.random() * (p2.getAp() - 0 + 1));
				p1.setHp(p1.getHp() - damage);
				printRound(turn, damage);
				turn++;
			}
		}
	}

}


Character.java

package object;

public class Character {

	private String name;
	private int ap;
	private int hp;
	
	public Character(String name, int ap, int hp) {
		this.name = name;
		this.ap = ap;
		this.hp = hp;
	}

	public int getAp() {
		return ap;
	}

	public void setAp(int ap) {
		this.ap = ap;
	}

	public int getHp() {
		return hp;
	}

	public void setHp(int hp) {
		this.hp = hp;
	}
	
	public String getName() {
		return this.name;
	}
	
}


GameRunner.java

package bin;

import object.GameEngine;
import object.Character;

public class GameRunner {

	public static void main(String[] args) {
		Character ronan = new Character("Ronan", 25, 100);
		Character noah = new Character("Noah", 25, 100);
		GameEngine e = new GameEngine(ronan, noah);

		e.start();
		if (ronan.getHp() > 0) {
			System.out.println(String.format("The winner is %s!\r\n%s: hp=%s\r\n%s hp=0", ronan.getName(),
					ronan.getName(), ronan.getHp(), noah.getName()));
		} else {
			System.out.println(String.format("The winner is %s!\r\n%s: hp=0\r\n%s hp=%s", noah.getName(),
					ronan.getName(), noah.getName(), noah.getHp()));
		}
	}

}

]

W04_01 Javadoc | 06.09.2023 [

Competition.java

/**
 * A competition, between up to five ships.
 * 
 * @author coughlar
 */

public class Competition {
	

	private String name; // The name of the competition.
	private Ship[] ships = new Ship[5]; // The array of ships to compete.
	
	/**
	 * Constructs an instance of a competition, with a name.
	 * 
	 * @param name The name of the competition
	 */

	public Competition(String name) {
		this.name = name;
	}
	
	/**
	 * Starts the competition by invoking the race method on each participating ship.
	 */

	public void start() {

		for (Ship s : this.ships) {
			if (s != null) {
				s.race();
			}
		}
	}
	
	/**
	 * Adds a ship to the array of ships.
	 * 
	 * @param ship The ship to be added to the ships array.
	 */

	public void addShip(Ship ship) {
		for (int i = 0; i < ships.length; i++) {
			if (ships[i] == null) {
				ships[i] = ship;
				break;
			}
		}
	}
	
	/**
	 * Prints the competition name and the number, name and time of each ship.
	 */

	public void printResult() {
		System.out.println("Wettkampf: " + this.name);

		for (Ship s : this.ships) {
			if (s != null) {
				System.out.println("Schiff Nr: " + s.getNr() + " Name: " + s.getName() + " Zeit: " + s.getTime());
			}
		}
	}
}


Ship.java

/**
 * Represents a Ship with a unique number, name, and time taken in a race.
 * 
 * @author coughlar
 */
public class Ship {
	
	private int nr; // The unique number of the ship
	private String name; // The name of the ship
	private int time; // The time taken by the ship in a race

	/**
	 * Constructs a new Ship with the given number and name.
	 * 
	 * @param nr   The unique number of the ship
	 * @param name The name of the ship
	 */
	public Ship(int nr, String name) {
		this.nr = nr;
		this.name = name;
	}
	
	/**
	 * Gets the unique number of the ship.
	 * 
	 * @return The unique number of the ship
	 */
	public int getNr() {
		return nr;
	}

	/**
	 * Sets the unique number of the ship.
	 * 
	 * @param nr The new unique number of the ship
	 */
	public void setNr(int nr) {
		this.nr = nr;
	}

	/**
	 * Gets the name of the ship.
	 * 
	 * @return The name of the ship
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * Sets the name of the ship.
	 * 
	 * @param name The new name of the ship
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Simulates a race for the ship by generating a random time between 300 and 600.
	 */
	public void race() {
		int min = 300;
		int max = 600;
		this.time = (int) (Math.random() * (max - min + 1)) + min;
	}
	
	/**
	 * Gets the time taken by the ship in the race.
	 * 
	 * @return The time taken by the ship in the race
	 */
	public int getTime() {
		return time;
	}
}


Start.java

/**
 * Runs the ship racing competition.
 * 
 * @author coughlar
 */
public class Start {

	/**
	 * The main method that sets up and starts a ship racing competition.
	 * 
	 * @param args Command line arguments.
	 */
	public static void main(String[] args) {
		
		// Create a new Competition named "Rotsee Regatta"
		Competition c = new Competition("Rotsee Regatta");
		
		// Create three new Ships with unique numbers and names
		Ship ship1 = new Ship(1, "Alinghi");
		Ship ship2 = new Ship(2, "Red Baron");
		Ship ship3 = new Ship(3, "Blue Lagoon");
		
		// Add the Ships to the Competition
		c.addShip(ship1);
		c.addShip(ship2);
		c.addShip(ship3);
		
		// Start the Competition
		c.start();
	
		// Print the results of the Competition
		c.printResult();
	}	
}

]

W05_02 Uebung Vererbung | 13.09.2023 [

Car.java

package object;

public class Car {
	
	@SuppressWarnings("unused")
	private String model;
	private double price;
	
	public Car(String model, double price) {
		this.model = model;
		this.price = price;
	}
	
	protected double getCarPrice() {
		return this.price;
	}
	
}


UsedCar.java

package object;

public class UsedCar extends Car {

	private int mileage;

	public UsedCar(String model, double price, int mileage) {
		super(model, price);
		this.mileage = mileage;
	}

	public double getPrice() {
		return super.getCarPrice() - (mileage * (super.getCarPrice() / 100 * 0.005));
	}

	public int getMileage() {
		return this.mileage;
	}

	public void setMileage(int mileage) {
		this.mileage = mileage;
	}

}


CrashedCar.java

package object;

public class CrashedCar extends Car {

	private int damageLevel;

	public CrashedCar(String model, double price, int damageLevel) {
		super(model, price);
		this.damageLevel = damageLevel;
	}

	public double getPrice() {

		switch (damageLevel) {

		case 0:
			return super.getCarPrice() / 10;

		case 1:
			return super.getCarPrice() / 2;

		default:
			return 0;

		}
	}

	public int getDamageLevel() {
		return this.damageLevel;
	}

	public void setDamageLevel(int damageLevel) {
		this.damageLevel = damageLevel;
	}

}


CarRunner.java

package runners;

import object.CrashedCar;
import object.UsedCar;

public class CarRunner {
	
	public static void main(String[] args) {
		
		CrashedCar crashedCar = new CrashedCar("Tesla", 49999.99, 1);
		UsedCar usedCar = new UsedCar("Mercedes", 125000, 4500);
		
		System.out.println(crashedCar.getPrice());
		System.out.println(usedCar.getPrice());
		
	}
}

]

W05_4 Uebung Polymorphie | 20.09.2023 [

Fleet.java

package object;

import java.util.ArrayList;
import java.util.List;

public class Fleet {
	
	private List<Car> cars = new ArrayList<Car>();
	
	public void addCar(Car car) {
		cars.add(car);
	}
	
	public void print() {
		for (Car c : cars) {
			System.out.println(c.getModel() + " " + c.getPrice());
		}
	}

}


CarRunner.java

package runners;

import object.CrashedCar;
import object.Fleet;
import object.UsedCar;

public class CarRunner {
	
	public static void main(String[] args) {
		
		Fleet fleet = new Fleet();
		
		fleet.addCar(new UsedCar("Mercedes", 125000, 4500));
		fleet.addCar(new CrashedCar("Tesla", 49999.99, 1));
		
		fleet.print();
		
	}
}

]

W06_2 Uebung Abstrakte Klassen | 20.09.2023 [

Car.java

package object;

public abstract class Car {
	
	private String model;
	protected double price;
	
	public Car(String model, double price) {
		this.model = model;
		this.price = price;
	}
	
	public abstract double getPrice();
	
	public String getModel() {
		return this.model;
	}
	
}

MobilityCar.java

package object;

public class MobilityCar extends Car{
	
	private int days;

	public MobilityCar(String model, double price) {
		super(model, price);
	}

	public int getDays() {
		return days;
	}

	public void setDays(int days) {
		this.days = days;
	}

	public double getPrice() {
		return this.days * 72;
	}

}

CarRunner.java

package runners;

import object.CrashedCar;
import object.Fleet;
import object.MobilityCar;
import object.UsedCar;

public class CarRunner {
	
	public static void main(String[] args) {
		
		Fleet fleet = new Fleet();
		
		fleet.addCar(new UsedCar("Mercedes", 125000, 4500));
		fleet.addCar(new CrashedCar("Tesla", 49999.99, 1));
		fleet.addCar(new MobilityCar("MobilityCar 5", 48500));
		
		fleet.print();
		
	}
}


]

W06_5 Game | 27.09.2023 [

Character.java

package game;

public class Character {

	private String name;
	private int hp; // health
	private int ap; // attack
	private Weapon weapon;

	public Character(String name, int hp, int ap) {
		this.name = name;
		this.hp = hp;
		this.ap = ap;
		this.weapon = new Axe();
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getHp() {
		return hp;
	}

	@SuppressWarnings("unused")
	private void setHp(int hp) {
		if (hp < 0) {
			this.hp = 0;
		} else {
			this.hp = hp;
		}
	}

	public int getAp() {
		return ap;
	}

	public void setAp(int ap) {
		this.ap = ap;
	}

	public Weapon getWeapon() {
		return weapon;
	}

	public void setWeapon(Weapon weapon) {
		this.weapon = weapon;
	}

	public void attack(Character enemy) {
		int hit = this.weapon.use(this.ap);
		
		enemy.setHp(enemy.getHp() - hit);

		System.out.println(this.name + " hit " + enemy.name + " with " + hit);
		this.log(this);
		this.log(enemy);
	}

	private void log(Character character) {
		System.out.println(character.getName() + ": " + "hp=" + character.getHp());
	}
}


Weapon.java

package game;

public interface Weapon {
	
	public int use(int ap);

}

Axe.java

package game;

public class Axe implements Weapon{

	@Override
	public int use(int ap) {
		return (int) (ap * Math.random());
	}

}

Dagger.java

package game;

public class Dagger implements Weapon{

	@Override
	public int use(int ap) {
		return (int) (ap / 2 * Math.random() + ap / 2 * Math.random());
	}

}

Tester.java

package game;

public class Tester {

	public static void main(String[] args) {

		Character char1 = new Character("Zenturon", 100, 20);
		Character char2 = new Character("Valarian", 100, 20);
		
		char2.setWeapon(new Dagger());

		Fight game = new Fight(char1, char2);
		game.fight();

		Character winner = game.getWinner();
		if (winner != null) {
			System.out.println(winner.getName() + " hat den Kampf gewonnen.");
		}
	}

}


** Fight hat keine Änderungen erhalten, also ist sie hier nicht vorhanden.

]